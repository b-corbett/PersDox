FORM HANDLING:
- a simple HTML form
<form action="filename.php" method="post">
    Name: <input type="text" name="name"><br>
    E-mail: <input type="text" name="email"><br>
    <input type="submit">
</form>

- when the submit button is clicked, the form data is sent to "filename.php"
- it is done via the POST method
- "filename.php" might look like this:
<body>
    Welcome <?php echp $_POST["name"]; ?><br>
    Your email is <?php echo $_POST["email"] ?>
</body>

- the same could be done using GET instead of POST

!!! This isn't secure though. No validation is happening.

$_GET is an array of variables passed to current script via URL parameters
$_POST is an array of variables passed to current script via HTTP POST method

- when to use GET:
    - data sent with GET is visible to everyone because values are
      displayed in the URL
    - has a limit of about 2,000 characters
    - this page can be bookmarked because data needed is in the URL
    - non-sensitive data; no passwords, etc.
- when to use POST:
    - data sent with POST is invisible to everyone because values are
      embedded within body of HTTP request
    - no limit on the amount of data it can send
    - not able to be bookmarked

FORM VALIDATION:
- look at this from element:
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
</form>

- form data is sent via POST method
- $_SERVER["PHP_SELF"] returns the filename of currently executing script
    - form data is sent to the current page and doesn't redirect to another
- htmlspecialchars()
    - converts special characters to HTML entities
        - < = &lt;
	- > = &gt;

- great validation function
<?php
    function valid_input($data) {
	$data = trim($data);               // strip unnecessary chars ie extra space, tab, newline
	$data = stripslashes($data);       // remove backslashes from data
	$data = htmlspecialchars($data);
	return $data;
}

    if ($_SERVER["REQUEST_METHOD"] == "POST") {  // if true, form has been submitted
        $form_d1 = valid_input($_POST["form_d1"]);
	$form_d2 = valid_input($_POST["form_d2"]);
	$form_d3 = valid_input($_POST["form_d3"]);
    }
?>

REQUIRED FIELDS:
- example of how to require:
<?php
    $nameError = "";

    if ($_SERVER["REQUEST_METHOD"] == "POST") {
	if (empty($_POST["name"])) {
	    $nameError = "Name is required";
	}
    }
?>

- and in the HTML:
<span class="error">
    <?php echo $nameError; ?>
</span>

VALIDATE E-MAIL AND URL:
- validate name
    $name = valid_data($_POST["name"]);
    if (!preg_match("/^[a-zA-Z-' ]*/", $name)) {
	$nameError = "Only letters and spaces";
    }
- validate email
    $email = valid_data($_POST["email"]);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
	$emailError = "Invalid email format";
    }
- validate URL
    $url = valid_data($_POST["url"]);
    if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www.\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $website)) {
	$urlError = "Invalid URL";
    }









