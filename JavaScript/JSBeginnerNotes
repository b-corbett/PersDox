Output
- Any number of scripts in HTML document
- In <head> or <body> tags, or both; script behaves as if it was written out where the tag is
- Place scripts at bottom of <body> because script interpretation slows down display speed
- JavaScript display choices
  * innerHTML
  * document.write()
    > using this after HTML doc has loaded will delete all existing HTML
    > just for testing
  * window.alert()
  * console.log()
- a window object is the global scope object; window = global scope

Statements
- executed by browser
- keywords cannot be used as variable names
- numbers can be written a float or integer automaticallu

Variables
- var, let, const
- declare many variables on one line: 
  * let var1 = 3, var2 = 49; << can also span mulitple lines
- treats dollar sign ($) as a letter, CAN be used in variable names

Using var to declare variables
- can be redeclared anywhere in program
- redeclaring in different scopes will redeclare everywhere
- used for global scope

Using let to declare variables
- cannot be redeclared within same scope
- redeclaring in different scopes will not effect other scoped variables
- used for block scope

Using const to declare variables
- cannot be redeclared or reassigned (value will always be the same)
- used for block scope
- must be defined when declared
- defines a constant REFERENCE TO a value
- CANNOT reassign:
  * value     * array     * object
- CAN change:
  * elements of array     * properties of object

Operators
- arithmetic
  +   -   *   **    /    %     ++     --
- assignment
  =   +=    - =     *=    /=    %=    **=
- comparison
  ==    ===   !=    !==   >   <   >=    <=    ?
- logical
  &&    ||    !
- type
  typeof    instanceof
- bitwise
  &   |    ~    ^     <<    >>      >>>

Strings
- built-in .length property of strings
- use concatenation to break up string to multiple lines
- comparing two objects will always be false

String Methods
- string method don't change original string but return new strings; strings are immutable
  
String Templates
- back ticks (``) to define a string
- any quotes can be used inside
- multiline is allowed
- INTERPOLATION
  * ${...}
  * `Welcome ${person1Name} and ${person2Name}!`;
    > string and expression substitution
    
Numbers
- number + number = number
- string + string = string
- number + string = string
- string + number = string
- works from left to right i.e. 10+20+"30" = 30+"30" = "3030" 
- with any other numeric operation and string involved, they will convert to numbers
- number.toString(16) - converts number to base 16
- numbers accurate up to 15 digits, stored in 64-bit floating-point format [(2^53)-1 - -(2^53)-1]
- BigInt data type: '15n'

Arrays - https://www.w3schools.com/js/js_array_iteration.asp

Date
- new Date(milliseconds)
- new Date(date string)

Loops
- for/in - loops through properties (keys) of an object
  for (key in object) {object[key]}
- Array.foreach(myFunction)
  myFunction(value, index, array)
- for/of - loops through values in an iterable
  for (i of cars) {cars[i]}

Comparisons
- if comparing number with string, will convert string to number
- nullish coalescing operator - returns first if arg is null / undefined, else returns second
  * name = null, text = "missing";
    result = name ?? text;
- optional chaining operator - instead of error, will return undefined if object is undef or null
  * const car = {model:"Fiat"}
    var variable = car?.name;   // no name property so returns undefined

Labels
- label:
  statements
- break statement w/o label can only jump out of loop or switch
                  w/ label it can jump out of any code block at all

Sets - unique values
- new Set()
- add(), delete(), has(), forEach(), values(), size

Maps
- set methods + get(), entries() (iterator with [key, value] pairs in Map
- key-value pairs where keys can be any datatype
- remembers original insertion order of keys

Typeof
- constructor property returns constructor function for all JS variables
  * use this to find out if an object is an array or date

Type Conversion
- Number(), parseFloat(), parseInt()
- unary + operator
  * converts string to number
  * let y = "5";
    let x = + y;
- String(), toString()
- toExponential(), toFixed(), toPrecision()

Error Objects
- properties: name, message
  * EvalError - occurred in the eval() function DEPRECATED
  * RangeError - number "out of range"
  * ReferenceError - illegal reference
  * SyntaxError - syntax error
  * TypeError - type error
  * URIError - error in encodeURI()
         
Scope
- Block scope
  * let & const
  * var CANNOT have block scope
- Local scope
  * variables declared in function, are LOCAL to the function (can only be accessed inside of it)
- Function scope
  * when defined inside a function, that variable is invisible from outside of function
  * var, let, & const all adhere entirely to function scope 
- Automatically global
  * any variable assignment anywhere that has not been declared is automatically global
  
Hoisting
- JS moves all declarations to the top of the current scope, which means
  * variables & functions can be used before theyre declared
- when defined with let and const, they are hoisted but not initialized
  * block is aware of the variable / function, but cant be used until is declared
- only declarations are hoisted, not initializations

this
- reference to the current object / function depending on context 
- object, bind(), apply() & call(), object method, global scope

Arrow function - let myFunction = (a, b) => a * b;
  * before: hello = function() {return "Hello World!";}
  * after:  hello = () => {return "Hello World!";}
  *         hello = () => "Hello World!";  // only if function has one statement
  *         hello = (val) => "Hello " + val;
  *         hello = val => "Hello " + val;  // only if function takes one parameter
- this - when used in regular function, refers to object that calls the function
         when used in arrow function, refers to 'owner' of the function

Class
- constructor()

Modules
- export a function / variable from any file - named & default
Named
- Inline
  export const name = "Jesse"
  export const age = 40
- All at once
  const name = "Jesse"
  const age = 40
  export {name, age}
Default - one export in a file
- const message = () => {}
  export default message
Import named
- import {name, age} from 'file'
Import default
- import message from 'file'

JSON
- often used when server sends data to web page
- names require double quotes
- JSON.parse() - convert JSON to JS object
- JSON.stringify() - converts JS object to JSON-formatted string

Style Guide
- At W3
  * camelCase for variables / functions
  * use 2 spaces for indentation
  * Globals and constants in UPPERCASE
  * hyphens are not allowed in JS names

Best practices
- avoid global variables, new, ==, eval()
- initialize variables when declared
- declare objects / arrays with const
- assign default values to parameters
- if (typeof Obj !== "undefined" && Obj !== null) {}

Accessors
- getters and setters
- Object.defineProperty()

Custom Iterables

Function Parameters
- function sum(...args) = sum(1, 2, 3, 6, 45, 3, 5)
- arguments object

===========================
// This is a function constructor:
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName  = arg2;
}

// This creates a new object
const myObj = new myFunction("John", "Doe");

// This will return "John"
myObj.firstName;
================================
































