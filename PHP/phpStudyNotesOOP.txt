OBJECT-ORIENTED PROGRAMMING:
- APIE
    Abstraction    Polymorphism    Inheritance    Encapsulation

- Define a class
<?php
    class Fruit {
	// Properties
	public $name;
	public $color;

	// Methods
	function __constructor($name) {
	    $this->name = $name;
	}
	function __destruct() {
	    // called when script is finished
	}
	function get_name() {
	    return $this->name;
	}
    }
?>
----
- check if an object belongs to a specific class: instanceof
    $apple = new Fruit();
    $apple instanceof Fruit; // true

ACCESS MODIFIERS:
- public    - property / method can be accessed from anywhere
- protected - property / method can be accessed from within class or derived class
- private   - property / method can ONLY be accessed from within the class

INHERITANCE:
class Fruit {}
class Strawberry extends Fruit {}

OVERRIDING METHODS:
- child class redefines method by same name from parent

FINAL KEYWORD:
- final keyword prevents class inheritance or method overriding
final class Fruit {}
class Strawberry extends Fruit {} // will result in error
// or
class Fruit {
    final public function intro() {}
}
class Strawberry extends Fruit {
    public function intro() {} // will resilt in error
}

CLASS CONSTANTS:
- cannot be changed
- accessed with scope resolution operator (::) from outside or inside class
class Goodbye {
    const LEAVING_MSG = "Thanks, bye";
}
echo Goodbye::LEAVING_MSG;
// or
class Goodbye {
    const LEAVING_MSG = "Thanks, bye";
    public function bye() {
        echo self::LEAVING_MSG;
    }
}

ABSTRACT CLASSES / METHODS:
- when parent has a named method, but children need to define the tasks
- at least one abstract method is considered an abstract class
- abstract methods are declared, but not defined by parent

abstract class Parent {
    abstract public function someMethod1();
    abstract public function someMethod2($name);
    abstract public function someMethod3() : string;
}

INTERFACES:
- specifies what methods a class should implement
- can use variety of classes in the same way
- 1+ classes using the same interface is "polymorphism"

interface InterfaceName {
    public function someMethod();
}

- interfaces vs abstract classes
               INTERFACE               |      ABSTRACT CLASSES
          cannot have properties       |    can have properties
        all methods must be public     |   can be any accessibility
all methods are automatically abstract | only requires one abstract method
    classes can implement interface    | can only inherit from one class
    AND inherit from class

interface Animal {
    public function makeSound();
}
class Cat implements Animal {
    public function makeSound() {
	echo "Meow";
    }
}

TRAITS:
- class can only inherit from one parent class
- to inherit multiple behaviors, use traits
- traits declare method that can be used by other classes
- traits can have methods & abstract methods

trait MessageOne {
    public function msg1() {
        echo "This is message.";
    }
}
trait MessageTwo {}

class MyClass {
    use MessageOne, MessageTwo;
}

STATIC METHODS:
- can be used directly, without creating instance of the class first
class ClassName {
    public static function staticMethod() {
	echo "Hello";
    }
}
ClassName::staticMethod();

- from child class, parent keyword can be used to refer to parent class

STATIC PROPERTIES:
class pi {
    public static $value = 3.14159;
}
echo pi::$value;

NAMESPACES:
- qualifiers that solve two problems:
    - better organization by grouping classes that work together
    - allow same name to be used for more than one class
- declared at beginning of a file. then everything in file belongs to namespace:
namespace Html;
class Table {}

- declare nested namespace:
namespace Code\Html;

- use classes from Html namespace:
$table = new Html\Table();

- explicit namespace qualifier:
namespace Html;
$table = new Table();

- namespace alias:
use Html as H;
$table = new H\Table();

use Html\Table as T;
$table = new T();

ITERABLES:
- iterable as a data type
- arrays are iterables
- iterator:
    - any object that implements the Iterator interface
    - contains list of items
    - provides methods to loop through them
    - keeps pointer to one of the elements in the list
    - each item should have a key to find them
    - must have these functions:
        - current() - returns element pointer is currently pointing to
        - key()     - returns key associated with current elemenet (int, float, bool, string)
        - next()    - moves pointer to next element in list
        - rewind()  - move pointer to first element in list
        - valid()   - if pointer not pointing to any element (next() is at the end of list)
                      should return false, else returns true
